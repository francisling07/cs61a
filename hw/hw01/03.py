<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>61A Code</title>
	  <script> var initData = {"loadFile": {"data": "# Print\n-2\nprint(-2)\n\u0027Go Bears\u0027\nprint(\u0027Go Bears\u0027)\nprint(1, 2, 3)\nNone\nprint(None)\nx = -2\nx\nx = print(-2)\nx\nprint(print(1), print(2))\n\n# Addition/Multiplication\n2 + 3 * 4 + 5\n(2 + 3) * (4 + 5)\n\n# Division\n618 / 10\n618 // 10\n618 % 10\nfrom operator import truediv, floordiv, mod\nfloordiv(618, 10)\ntruediv(618, 10)\nmod(618, 10)\n\n# Approximation\n5 / 3\n5 // 3\n5 % 3\n\n# Multiple return values\ndef divide_exact(n, d):\n    return n // d, n % d\nquotient, remainder = divide_exact(618, 10)\n\n# Dostrings, doctests, \u0026 default arguments\ndef divide_exact(n, d=10):\n    \"\"\"Return the quotient and remainder of dividing N by D.\n\n    \u003e\u003e\u003e quotient, remainder = divide_exact(618, 10)\n    \u003e\u003e\u003e quotient\n    61\n    \u003e\u003e\u003e remainder\n    8\n    \"\"\"\n    return floordiv(n, d), mod(n, d)\n\n# Conditional expressions\ndef absolute_value(x):\n    \"\"\"Return the absolute value of X.\n\n    \u003e\u003e\u003e absolute_value(-3)\n    3\n    \u003e\u003e\u003e absolute_value(0)\n    0\n    \u003e\u003e\u003e absolute_value(3)\n    3\n    \"\"\"\n    if x \u003c 0:\n        return -x\n    elif x == 0:\n        return 0\n    else:\n        return x\n\n# Summation via while\ni, total = 0, 0\nwhile i \u003c 3:\n    i = i + 1\n    total = total + i\ntotal\n\n# Return\n\ndef end(n, d):\n    \"\"\"Print the final digits of N in reverse order until D is found.\n\n    \u003e\u003e\u003e end(34567, 5)\n    7\n    6\n    5\n    \"\"\"\n    while n \u003e 0:\n        last, n = n % 10, n // 10\n        print(last)\n        if d == last:\n            return None\n\ndef search(f):\n    \"\"\"Return the smallest non-negative integer x for which f(x) is a true value.\"\"\"\n    x = 0\n    while True:\n        if f(x):\n            return x\n        x += 1\n\ndef is_three(x):\n    \"\"\"Return whether x is three.\n\n    \u003e\u003e\u003e search(is_three)\n    3\n    \"\"\"\n    return x == 3\n\ndef square(x):\n    return x * x\n\ndef positive(x):\n    \"\"\"A function that is 0 until square(x)-100 is positive.\n\n    \u003e\u003e\u003e search(positive)\n    11\n    \"\"\"\n    return max(0, square(x) - 100)\n\ndef invert(f):\n    \"\"\"Return a function g(y) that returns x such that f(x) == y.\n\n    \u003e\u003e\u003e sqrt = invert(square)\n    \u003e\u003e\u003e sqrt(16)\n    4\n    \"\"\"\n    return lambda y: search(lambda x: f(x) == y)\n\n# Control\n\ndef if_(c, t, f):\n    if c:\n        t\n    else:\n        f\n\nfrom math import sqrt\n\ndef real_sqrt(x):\n    \"\"\"Return the real part of the square root of x.\n\n    \u003e\u003e\u003e real_sqrt(4)\n    2.0\n    \u003e\u003e\u003e real_sqrt(-4)\n    0.0\n    \"\"\"\n    if x \u003e 0:\n        return sqrt(x)\n    else:\n        return 0.0\n    # if_(x \u003e 0, sqrt(x), 0.0)\n\n# Control Expressions\n\ndef has_big_sqrt(x):\n    \"\"\"Return whether x has a big square root.\n\n    \u003e\u003e\u003e has_big_sqrt(1000)\n    True\n    \u003e\u003e\u003e has_big_sqrt(100)\n    False\n    \u003e\u003e\u003e has_big_sqrt(0)\n    False\n    \u003e\u003e\u003e has_big_sqrt(-1000)\n    False\n    \"\"\"\n    return x \u003e 0 and sqrt(x) \u003e 10\n\ndef reasonable(n):\n    \"\"\"Is N small enough that 1/N can be represented?\n\n    \u003e\u003e\u003e reasonable(100)\n    True\n    \u003e\u003e\u003e reasonable(0)\n    True\n    \u003e\u003e\u003e reasonable(-100)\n    True\n    \u003e\u003e\u003e reasonable(10 ** 1000)\n    False\n    \"\"\"\n    return n == 0 or 1/n != 0.0\n", "fileName": "03.py", "shareRef": null}} </script>
  <link rel="shortcut icon" href="/favicon.ico"><link href="/static/pace/pace.css" rel="stylesheet"></head>
  <body>
  <script type="text/javascript" src="/static/pace/pace.min.js"></script><script type="text/javascript" src="/static/main.js"></script></body>
</html>